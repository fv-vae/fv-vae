name: "DQ_UCF101_FRAME"
layer {
  name: "data"
  type: "ImageData"
  top: "data"
  top: "label"
  image_data_param {
    source: "ucf101_frame_list_split1.txt"
	batch_size: 128
	new_height: 240
	new_width: 320
    shuffle: true
  }
  tranform_param {
    mirror: true
	crop_size: 224
    mean_value: [104, 117, 123]
  }
  include {
    phase: TRAIN
  }
}

# ----------- 1st layer group ---------------
layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {lr_mult: 0}
  param {lr_mult: 0}
  convolution_param {
    num_output: 64
    kernel_size: 3
    pad: 1
  }
}

layer {
  name: "relu1_1"
  type:  "ReLU" 
  bottom: "conv1_1"
  top: "conv1_1"
}

layer {
  bottom: "conv1_1"
  top: "conv1_2"
  name: "conv1_2"
  type: "Convolution"
  param {lr_mult: 0}
  param {lr_mult: 0}
  convolution_param {
    num_output: 64
    kernel_size: 3
    pad: 1
  }
}

layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}

layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# ------------- 2nd layer group --------------
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {lr_mult: 0}
  param {lr_mult: 0}
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 1
  }
}

layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}

layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {lr_mult: 0}
  param {lr_mult: 0}
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 1
  }
}

layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}

layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# ----------------- 3rd layer group --------------
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {lr_mult: 0}
  param {lr_mult: 0}
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
  }
}

layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}

layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {lr_mult: 0}
  param {lr_mult: 0}
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
  }
}

layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}

layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {lr_mult: 0}
  param {lr_mult: 0}
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
  }
}

layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}

layer {
  name: "conv3_4"
  type: "Convolution"
  bottom: "conv3_3"
  top: "conv3_4"
  param {lr_mult: 0}
  param {lr_mult: 0}
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
  }
}

layer {
  name: "relu3_4"
  type: "ReLU"
  bottom: "conv3_4"
  top: "conv3_4"
}

layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_4"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# --------- 4th layer group
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {lr_mult: 0}
  param {lr_mult: 0}
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
  }
}

layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}

layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {lr_mult: 0}
  param {lr_mult: 0}
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
  }
}

layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}

layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {lr_mult: 0}
  param {lr_mult: 0}
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
  }
}

layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}

layer {
  name: "conv4_4"
  type: "Convolution"
  bottom: "conv4_3"
  top: "conv4_4"
  param {lr_mult: 0}
  param {lr_mult: 0}
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
  }
}

layer {
  name: "relu4_4"
  type: "ReLU"
  bottom: "conv4_4"
  top: "conv4_4"
}

layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_4"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# --------------- 5th layer group --------
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {lr_mult: 0}
  param {lr_mult: 0}
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
  }
}

layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}

layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {lr_mult: 0}
  param {lr_mult: 0}
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
  }
}

layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}

layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {lr_mult: 0}
  param {lr_mult: 0}
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
  }
}

layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}

layer {
  name: "conv5_4"
  type: "Convolution"
  bottom: "conv5_3"
  top: "conv5_4"
  param {lr_mult: 0}
  param {lr_mult: 0}
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
  }
}

layer {
  name: "relu5_4"
  type: "ReLU"
  bottom: "conv5_4"
  top: "conv5_4"
}

layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5_4"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

# ---------------- preprocess net -------------
layer {
  name: "pool5_norm"
  type: "Normalize"
  bottom: "pool5"
  top: "pool5_norm"
  param {
    lr_mult: 0
  }
  norm_param {
    across_spatial: true
    scale_filler {
      type: "constant"
      value: 158
    }
    channel_shared: true
    fix_scale: true
  }
}

layer {
  name: "pool_6x6"
  type: "Pooling"
  bottom: "pool5_norm"
  top: "pool_6x6"
  pooling_param {
    pool: MAX
    kernel_size: 2
  }
}

layer {
  name: "pool_6x6_reshape"
  type: "Reshape"
  bottom: "pool_6x6"
  top: "pool_6x6_reshape"
  reshape_param {
    shape {
	  dim: -1
	  dim: 512
	  dim: 1
	  dim: 36
	}
  } 
}

layer {
  name: "pool_3x3"
  type: "Pooling"
  bottom: "pool5_norm"
  top: "pool_3x3"
  pooling_param {
    pool: MAX
    kernel_size: 3
	stride: 2
  } 
}

layer {
  name: "pool_3x3_reshape"
  type: "Reshape"
  bottom: "pool_3x3"
  top: "pool_3x3_reshape"
  reshape_param {
    shape {
	  dim: -1
	  dim: 512
	  dim: 1
	  dim: 9
	}
  } 
}

layer {
  name: "pool_2x2"
  type: "Pooling"
  bottom: "pool5_norm"
  top: "pool_2x2"
  pooling_param {
    pool: MAX
    kernel_size: 4
	stride: 3
  } 
}

layer {
  name: "pool_2x2_reshape"
  type: "Reshape"
  bottom: "pool_2x2"
  top: "pool_2x2_reshape"
  reshape_param {
    shape {
	  dim: -1
	  dim: 512
	  dim: 1
	  dim: 4
	}
  } 
}

layer {
  name: "pool_1x1"
  type: "Pooling"
  bottom: "pool5_norm"
  top: "pool_1x1"
  pooling_param {
    pool: MAX
    kernel_size: 7
	stride: 6
  }
}

layer {
  name: "pool_1x1_reshape"
  type: "Reshape"
  bottom: "pool_1x1"
  top: "pool_1x1_reshape"
  reshape_param {
    shape {
	  dim: -1
	  dim: 512
	  dim: 1
	  dim: 1
	}
  }
}

layer {
  name: "pool_concat"
  type: "Concat"
  bottom: "pool_6x6_reshape"
  bottom: "pool_3x3_reshape"
  bottom: "pool_2x2_reshape"
  bottom: "pool_1x1_reshape"
  top: "xt"
  concat_param {
    axis: 3
  }
}
#------------mean/var network-----------------
layer {
  name: "xt_dropout"
  type: "Dropout"
  bottom: "xt"
  top: "xt_dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "encoder1"
  type: "Convolution"
  bottom: "xt_dropout"
  top: "encoder1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "encoder1_relu"
  type: "ReLU"
  bottom: "encoder1"
  top: "encoder1"
}

layer {
  name: "encoder2"
  type: "Convolution"
  bottom: "encoder1"
  top: "encoder2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "z_sigma_zeros"
  type: "DummyData"
  top: "z_sigma_zeros"
  dummy_data_param {
    shape {
	  dim: 128
	  dim: 256
	  dim: 1
	  dim: 50
	}
	data_filler {
	  type: "constant"
	  value: 0
	}
  }
}

layer {
  name: "z_sigma"
  type: "Bias"
  bottom: "z_sigma_zeros"
  top: "z_sigma"
  param {
    lr_mult: 10
	decay_mult: 0
  }
  bias_param {
    filler {
	  type: "constant"
	  value: 0
	}
  }
  include {
    phase: TRAIN
  }  
}
#------------sampling loss-----------
layer {
  name: "zt_sampling"
  type: "SampleLoss"
  bottom: "encoder2"
  bottom: "z_sigma"
  top: "loss_reg"
  top: "zt"
  exp_param {
    scale: 1
  }
  include {
    phase: TRAIN
  }
}

#------------classification loss--------

layer {
  name: "scoremap"
  type: "Convolution"
  bottom: "zt"
  top: "scoremap"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 101
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  include {
    phase: TRAIN
  }
}

layer {
  name: "score"
  type: "Pooling"
  bottom: "scoremap"
  top: "score"
  pooling_param{ 
    pool: MAX
    global_pooling: true
  }
  include {
    phase: TRAIN
  }
}

layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "score"
  bottom: "label"
  top: "loss_cls"
  loss_weight: 1e3
  loss_param{
    normalization: NONE
  }
  include {
    phase: TRAIN
  }
}

#------------mean/var network-----------------
layer {
  name: "decoder"
  type: "Deconvolution"
  bottom: "zt"
  top: "decoder"
  param {
    name: "decoder_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "decoder_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "decoder_relu"
  type: "ReLU"
  bottom: "decoder"
  top: "decoder"
}

layer {
  name: "x_sigma_zeros"
  type: "DummyData"
  top: "x_sigma_zeros"
  dummy_data_param {
    shape {
	  dim: 128
	  dim: 512
	  dim: 1
	  dim: 50
	}
	data_filler {
	  type: "constant"
	  value: 0
	}
  }
  include {
    phase: TRAIN
  }
}

layer {
  name: "x_sigma"
  type: "Bias"
  bottom: "x_sigma_zeros"
  top: "x_sigma"
  param {
    lr_mult: 10
	decay_mult: 0
  }
  bias_param {
    filler {
	  type: "constant"
	  value: 0
	}
  }
}
#------------reconstruct loss--------
layer {
  name: "loss_rec"
  type: "GaussionLoss"
  bottom: "xt"
  bottom: "decoder"
  bottom: "x_sigma"
  top: "loss_rec"
  loss_weight: 1
  exp_param {
    scale: 1
  }
}